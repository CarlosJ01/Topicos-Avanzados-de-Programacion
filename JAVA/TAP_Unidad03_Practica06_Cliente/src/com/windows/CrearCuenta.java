/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.windows;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.ws.rs.core.UriBuilder;
import mdlaf.MaterialLookAndFeel;
import mdlaf.animation.MaterialUIMovement;
import mdlaf.utils.MaterialColors;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author Carlos J
 */
public class CrearCuenta extends javax.swing.JFrame {

    private JSONArray arrayUsuarios;
    
    /**
     * Creates new form CrearCuenta
     */
    public CrearCuenta() {
        initComponents();
        
        setLocationRelativeTo(null);
        
        labelUsr.setForeground(MaterialColors.LIGHT_BLUE_400);
        labelPass.setForeground(MaterialColors.LIGHT_BLUE_400);
        labelPass1.setForeground(MaterialColors.LIGHT_BLUE_400);
        
        btnRegistrar.setBackground(MaterialColors.LIGHT_BLUE_400);
        btnRegistrar.setForeground(Color.WHITE);
        MaterialUIMovement.add(btnRegistrar, MaterialColors.BLUE_700, 5, 1000 / 30);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRegistrar = new javax.swing.JButton();
        textFieldUsr = new org.edisoncor.gui.textField.TextFieldRoundIcon();
        labelUsr = new javax.swing.JLabel();
        labelPass = new javax.swing.JLabel();
        passField = new org.edisoncor.gui.passwordField.PasswordFieldRoundIcon();
        labelPass1 = new javax.swing.JLabel();
        passField2 = new org.edisoncor.gui.passwordField.PasswordFieldRoundIcon();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Crear Cuenta");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnRegistrar.setText("Crear y Acceder");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        labelUsr.setText("Usuario:");

        labelPass.setText("Contraseña:");

        labelPass1.setText("Repetir Contraseña:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textFieldUsr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passField2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelUsr)
                            .addComponent(labelPass)
                            .addComponent(labelPass1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelUsr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldUsr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelPass)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelPass1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnRegistrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        boolean error = false;
        if(textFieldUsr.getText().isEmpty() || passField.getText().isEmpty() || passField2.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null,"Todos los campos son requeridos","Error",JOptionPane.ERROR_MESSAGE);
            error = true;
        } else {
            if( ! passField.getText().equals(passField2.getText())) {
                JOptionPane.showMessageDialog(null,"Las contraseñas no coinciden","Error",JOptionPane.ERROR_MESSAGE);
                error = true;
            } else {
                
                // Buscar el usuario
                for (int i = 0; i < arrayUsuarios.size(); i++) {
                    if(arrayUsuarios.get(i).equals(textFieldUsr.getText())) {
                        JOptionPane.showMessageDialog(null,"El usuario ya existe. Por favor elija otro.","Error",JOptionPane.ERROR_MESSAGE);
                        error = true;
                        break;
                    }
                }
                
            }
        }
        // Si no hay errores
        if(!error) {
            registrar(textFieldUsr.getText(), passField.getText());
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        String urlWS = "http://localhost:8080/TAP_Unidad03_Practica06/res/service/users";
        
        HttpURLConnection connection = null;
        
        try {
            URL url = new URL(urlWS);
            
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);
            
            // Get Response	
            InputStream is = connection.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String line;
            String respuesta = "";
            while( (line=br.readLine()) != null ) {
                respuesta += line;
            }
            // Disconnect
            br.close();
            connection.disconnect();
            
            System.out.println("Usuarios: " + respuesta);
            
            if(!respuesta.isEmpty()) {
                JSONParser jParser = new JSONParser();
                arrayUsuarios = (JSONArray) jParser.parse(respuesta);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Material Design look and feel */
        try {
            UIManager.setLookAndFeel(new MaterialLookAndFeel());
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrearCuenta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel labelPass;
    private javax.swing.JLabel labelPass1;
    private javax.swing.JLabel labelUsr;
    private org.edisoncor.gui.passwordField.PasswordFieldRoundIcon passField;
    private org.edisoncor.gui.passwordField.PasswordFieldRoundIcon passField2;
    private org.edisoncor.gui.textField.TextFieldRoundIcon textFieldUsr;
    // End of variables declaration//GEN-END:variables

    private void registrar(String usr, String pass) {
        String urlWS = "http://localhost:8080/TAP_Unidad03_Practica06/res/service/registrar";
        
        HttpURLConnection connection = null;
        try {
            UriBuilder builder = UriBuilder.fromPath(urlWS)
                .queryParam("usr", usr)
                .queryParam("pass", pass);
            
            URI uri = builder.build();
            
            connection = (HttpURLConnection) uri.toURL().openConnection();
            connection.setRequestMethod("GET");
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);
            
            // Get Response	
            InputStream is = connection.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String line;
            String respuesta = "";
            while( (line=br.readLine()) != null ) {
                respuesta += line;
            }
            // Disconnect
            br.close();
            connection.disconnect();
            
            System.out.println(respuesta);
            
            if(!respuesta.isEmpty()) {
                JSONParser jParser = new JSONParser();
                JSONObject json = (JSONObject) jParser.parse(respuesta);

                if(json.containsKey("id_usuario")) {
                    acceso(json);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void acceso(JSONObject usuario) {
        dispose();
        new Principal(usuario).setVisible(true);
    }
}
