/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.SistemaEscolar;

import Models.Alumno;
import Models.Calificaciones;
import Models.Carrera;
import Models.Egresado;
import Models.ManejadorDB;
import Models.Materia;
import Models.Promedio;
import Reports.Alumnos;
import Reports.Egresados;
import Windows.DatosAlumno;
import Windows.DatosEgresado;
import Windows.EliminarAlumno;
import Windows.ListaCarreras;
import Windows.MostrarCalificaciones;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carlos J
 */
public class SistemaEscolar extends javax.swing.JFrame {

    /**
     * Creates new form SistemaEscolar
     */
    
    private ArrayList<Alumno> listaAlumnos = null;
    
    public SistemaEscolar() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        btnMostrar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnInscribir = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        AvanceCalificaciones = new javax.swing.JMenuItem();
        Top10Promedios = new javax.swing.JMenuItem();
        ProcentajeReprovacion = new javax.swing.JMenuItem();
        BuscarAlumno = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Refrescar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        listado = new javax.swing.JMenuItem();
        resientesCarrera = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        kardexIndividual = new javax.swing.JMenuItem();
        Top10Carreras = new javax.swing.JMenuItem();
        porGeneracion = new javax.swing.JMenuItem();
        buscarEgresado = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Escolar");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Numero de Control", "Nombre Completo", "Semestre", "Carrera", "Calificaciones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        btnMostrar.setText("Mostrar con Egresados");
        btnMostrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMostrarMouseClicked(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarMouseClicked(evt);
            }
        });

        btnInscribir.setText("Inscribir");
        btnInscribir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInscribirMouseClicked(evt);
            }
        });

        jMenu1.setText("Alumnos");

        jMenu4.setText("Reportes");

        AvanceCalificaciones.setText("Avance de Calificaciones");
        AvanceCalificaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvanceCalificacionesActionPerformed(evt);
            }
        });
        jMenu4.add(AvanceCalificaciones);

        Top10Promedios.setText("Top 10 Promedios");
        Top10Promedios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top10PromediosActionPerformed(evt);
            }
        });
        jMenu4.add(Top10Promedios);

        ProcentajeReprovacion.setText("Porcentaje de Reprobacion");
        ProcentajeReprovacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcentajeReprovacionActionPerformed(evt);
            }
        });
        jMenu4.add(ProcentajeReprovacion);

        jMenu1.add(jMenu4);

        BuscarAlumno.setText("Buscar Alumno");
        BuscarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarAlumnoActionPerformed(evt);
            }
        });
        jMenu1.add(BuscarAlumno);
        jMenu1.add(jSeparator1);

        Refrescar.setText("Refrescar");
        Refrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefrescarActionPerformed(evt);
            }
        });
        jMenu1.add(Refrescar);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Egresados");

        jMenu5.setText("Reportes");

        listado.setText("Listado");
        listado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listadoActionPerformed(evt);
            }
        });
        jMenu5.add(listado);

        resientesCarrera.setText("Resientes por Carrera");
        resientesCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resientesCarreraActionPerformed(evt);
            }
        });
        jMenu5.add(resientesCarrera);

        jMenu6.setText("Kardex");

        kardexIndividual.setText("Individula");
        kardexIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kardexIndividualActionPerformed(evt);
            }
        });
        jMenu6.add(kardexIndividual);

        Top10Carreras.setText("Top 10 por Carrera");
        Top10Carreras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top10CarrerasActionPerformed(evt);
            }
        });
        jMenu6.add(Top10Carreras);

        jMenu5.add(jMenu6);

        porGeneracion.setText("Por Generacion");
        porGeneracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porGeneracionActionPerformed(evt);
            }
        });
        jMenu5.add(porGeneracion);

        jMenu2.add(jMenu5);

        buscarEgresado.setText("Buscar Egresado");
        buscarEgresado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarEgresadoActionPerformed(evt);
            }
        });
        jMenu2.add(buscarEgresado);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Salir");

        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMostrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnInscribir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMostrar)
                    .addComponent(btnEliminar)
                    .addComponent(btnInscribir))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Al abrir el programa
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            ManejadorDB manajer = new ManejadorDB();
            ArrayList<Alumno> alumnos = manajer.mostrarAlumnos();

            //Cargar Interfas
            String datos[][]={};
            String colum[]={"Numero de Control","Nombre Completo","Semestre","Carrera","Calificaciones"};
            DefaultTableModel modelo = new DefaultTableModel(datos,colum);
            tabla.setModel(modelo);

            //Cargar Datos
            int filas=0;
            for (int i = 0; i < alumnos.size(); i++) {
                modelo.insertRow(filas,new Object[]{});
                modelo.setValueAt(alumnos.get(i).getNumeroControl(),filas,0);
                modelo.setValueAt(alumnos.get(i).getNombreCompleto(),filas,1);
                modelo.setValueAt(alumnos.get(i).getSemestre(),filas,2);
                modelo.setValueAt(alumnos.get(i).getCarrera().getNombreCarrera(),filas,3);
                modelo.setValueAt("Ver",filas,4);
                filas++;
            }

            listaAlumnos=alumnos;

        } catch (Exception e) {
            System.out.println("Error al Abrir la Base de Datos");
        }
    }//GEN-LAST:event_formWindowOpened

    //Mostra Egresados
    private void btnMostrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMostrarMouseClicked
        try{
            ManejadorDB manejador = new ManejadorDB();
            manejador.mostarAlumnosYEgresados(tabla);
        }
        catch (Exception ex){
            System.out.println("Error al Abrir la Base de Datos");
        }
    }//GEN-LAST:event_btnMostrarMouseClicked

    //Inscribir un Alumno
    private void btnInscribirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInscribirMouseClicked
        new ListaCarreras().setVisible(true);
    }//GEN-LAST:event_btnInscribirMouseClicked

    //Modificar calificaciones
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        try{
            int row = tabla.rowAtPoint(evt.getPoint());
            String numCont=tabla.getValueAt(row,0).toString();
            String nombre=tabla.getValueAt(row,1).toString();
            
            new MostrarCalificaciones(numCont,nombre).setVisible(true);
        }
        catch (Exception ex){
            System.out.println("Error al Abrir calificaciones");
        }
    }//GEN-LAST:event_tablaMouseClicked

    //Eliminar a un Alumno
    private void btnEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarMouseClicked
        String numCont = JOptionPane.showInputDialog(null,"Numero de Control: ");
        
        try {
            ManejadorDB manejador = new ManejadorDB();
            ArrayList<Calificaciones> cals = manejador.listaCalificaciones();
            if(new Alumno().puedeEliminar(numCont, cals)){
                ArrayList<Alumno> lista = manejador.mostrarAlumnos();
                Alumno alm = new Alumno().buscar(lista, numCont);
                new EliminarAlumno(alm.getNumeroControl(),alm.getNombreCompleto(),alm.getSemestre(),alm.getCarrera().getNombreCarrera()).setVisible(true);
            }else{
                JOptionPane.showMessageDialog(null,"El alumno no se puede eliminar");
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error al eliminar un alumno");
        }
    }//GEN-LAST:event_btnEliminarMouseClicked

    //Refrescar Tabla
    private void RefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefrescarActionPerformed
        try {
            ManejadorDB manajer = new ManejadorDB();
            ArrayList<Alumno> alumnos = manajer.mostrarAlumnos();

            //Cargar Interfas
            String datos[][]={};
            String colum[]={"Numero de Control","Nombre Completo","Semestre","Carrera","Calificaciones"};
            DefaultTableModel modelo = new DefaultTableModel(datos,colum);
            tabla.setModel(modelo);

            //Cargar Datos
            int filas=0;
            for (int i = 0; i < alumnos.size(); i++) {
                modelo.insertRow(filas,new Object[]{});
                modelo.setValueAt(alumnos.get(i).getNumeroControl(),filas,0);
                modelo.setValueAt(alumnos.get(i).getNombreCompleto(),filas,1);
                modelo.setValueAt(alumnos.get(i).getSemestre(),filas,2);
                modelo.setValueAt(alumnos.get(i).getCarrera().getNombreCarrera(),filas,3);
                modelo.setValueAt("Ver",filas,4);
                filas++;
            }

            listaAlumnos=alumnos;

        } catch (Exception e) {
            System.out.println("Error al Abrir la Base de Datos");
        }
    }//GEN-LAST:event_RefrescarActionPerformed

    //Buscar Alumno
    private void BuscarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarAlumnoActionPerformed
        String numCont = JOptionPane.showInputDialog(null,"Numero de Control: ");
        try {
            ManejadorDB manejador = new ManejadorDB();
            ArrayList<Alumno> lista = manejador.mostrarAlumnos();
            Alumno alm = new Alumno().buscar(lista, numCont);
            new DatosAlumno(alm.getNumeroControl(),alm.getNombreCompleto(),alm.getSemestre(),alm.getCarrera().getNombreCarrera()).setVisible(true);
        } catch (Exception e) {
            System.out.println("Error al Buscar a un Alumno");
        }
        
    }//GEN-LAST:event_BuscarAlumnoActionPerformed

    //Buscar Egresado
    private void buscarEgresadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarEgresadoActionPerformed
        String numCont = JOptionPane.showInputDialog(null,"Numero de Control: ");
        try {
            ManejadorDB manejador = new ManejadorDB();
            ArrayList<Egresado> lista = manejador.mostrarEgresados();
            Egresado egre = new Egresado().buscar(lista, numCont);
            new DatosEgresado(egre.getNumControl(),egre.getNombreCompleto(),egre.getFechaEgreso(),egre.getCarrera().getNombreCarrera()).setVisible(true);
            } catch (Exception e) {
            System.out.println("Error al Buscar a un Alumno");
        }
    }//GEN-LAST:event_buscarEgresadoActionPerformed

    //Salir
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //Reporte Avance de Calificaciones
    private void AvanceCalificacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AvanceCalificacionesActionPerformed
        String numCont = JOptionPane.showInputDialog(null,"Numero de Control: ");
        jFileChooser1.setDialogTitle("Avance de Calificicaiciones");
        jFileChooser1.setSelectedFile(new File("Avance de Calificaciones de "+numCont+".pdf"));
        if (jFileChooser1.showSaveDialog(null)==0) {
            
            try {
                ManejadorDB manejador = new ManejadorDB();
                ArrayList<Calificaciones> listaCalificaciones = manejador.mostrarCalificaciones(numCont);
                ArrayList<Alumno> listaAlumno = manejador.mostrarAlumnos();
                Alumno alumno = new Alumno().buscar(listaAlumno, numCont);
                
                float promedio = 0;
                for(Calificaciones calf : listaCalificaciones){
                    promedio += calf.getCalificacion();
                }
                if (promedio!=0) {
                    promedio/=listaCalificaciones.size();
                }
                
                Alumnos reporte = new Alumnos();
                reporte.AvanceCalif(jFileChooser1.getSelectedFile().toPath().toString(),alumno, listaCalificaciones, promedio);
                
                JOptionPane.showMessageDialog(null,"Reporte Generado");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Error al generar el reporte");
                System.out.println("Error al generar el reporte");
            }
        }
    }//GEN-LAST:event_AvanceCalificacionesActionPerformed

    //Reporte Top 10 Promedios
    private void Top10PromediosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Top10PromediosActionPerformed
        jFileChooser1.setDialogTitle("Top 10 Promedios");
        jFileChooser1.setSelectedFile(new File("Top 10 promedios.pdf"));
        if (jFileChooser1.showSaveDialog(null)==0) {
            
            try {
                ManejadorDB manejador = new ManejadorDB();
                ArrayList<Alumno> listaAlumno = manejador.mostrarAlumnos();
                ArrayList<Calificaciones> listaCalificaciones = manejador.listaCalificaciones();
                
                ArrayList<Promedio> listaPromedios = new Promedio().listaPromedios(listaAlumno, listaCalificaciones);
                ArrayList<Promedio> listaTop = new Promedio().top10(listaPromedios);
                
                Alumnos reporte = new Alumnos();
                reporte.Top10(jFileChooser1.getSelectedFile().toPath().toString(), listaTop);
                
                JOptionPane.showMessageDialog(null,"Reporte Generado");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Error al generar el reporte");
                System.out.println("Error al generar el reporte");
            }
        }
    }//GEN-LAST:event_Top10PromediosActionPerformed

    //Reporte Porcentaje de Reprovacion
    private void ProcentajeReprovacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcentajeReprovacionActionPerformed
        jFileChooser1.setDialogTitle("Porcentaje de Reprovacion");
        jFileChooser1.setSelectedFile(new File("Porcentaje de Reprovacion.pdf"));
        if (jFileChooser1.showSaveDialog(null)==0) {
            try {
                ManejadorDB manejador = new ManejadorDB();
                ArrayList<Calificaciones> listaCalificaciones = manejador.listaCalificaciones();
                ArrayList<Materia> listaMaterias = manejador.listaMaterias();
                ArrayList<Float> listaPorcentaje = new ArrayList<>();
                
                for (Materia materia : listaMaterias)
                {
                    ArrayList<Calificaciones> listaCalifMateria = new Calificaciones().listaMateria(listaCalificaciones, materia.getNombre_materia());
                    listaPorcentaje = new Materia().porcentajeReprovacion(listaPorcentaje, listaCalifMateria);
                }
                
                Alumnos reporte = new Alumnos();
                reporte.PorcentajeReprobacion(jFileChooser1.getSelectedFile().toPath().toString(), listaPorcentaje, listaMaterias);
                
                JOptionPane.showMessageDialog(null,"Reporte Generado");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Error al generar el reporte");
                System.out.println("Error al generar el reporte");
            }
        }
    }//GEN-LAST:event_ProcentajeReprovacionActionPerformed

    //Reporte Listado
    private void listadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listadoActionPerformed
        jFileChooser1.setDialogTitle("Listado de Egresados");
        jFileChooser1.setSelectedFile(new File("Listado de Egresados.pdf"));
        if (jFileChooser1.showSaveDialog(null)==0) {
            try {
                ManejadorDB manejador = new ManejadorDB();
                
                Egresados reporte = new Egresados();
                reporte.listado(jFileChooser1.getSelectedFile().toPath().toString(),manejador.mostrarEgresados());
                
                JOptionPane.showMessageDialog(null,"Reporte Generado");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Error al generar el reporte");
                System.out.println("Error al generar el reporte");
            }
        }
    }//GEN-LAST:event_listadoActionPerformed

    //Reporte Recientes por Carrera
    private void resientesCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resientesCarreraActionPerformed
        jFileChooser1.setDialogTitle("Recientes por Carrera");
        jFileChooser1.setSelectedFile(new File("Recientes por Carrera.pdf"));
        if (jFileChooser1.showSaveDialog(null)==0) {
            try {
                ManejadorDB manejador = new ManejadorDB();
                ArrayList<Egresado> egresados = manejador.mostrarEgresados();
                for(Egresado item : egresados){
                    item.setGeneracion(item.SacarGeneracion(item.getFechaEgreso()));
                }
                egresados = new Egresado().ordenarGeneracion(egresados);
                
                Egresados reporte = new Egresados();
                reporte.recientes(jFileChooser1.getSelectedFile().toPath().toString(), egresados,manejador.ListaCarreras());
                
                JOptionPane.showMessageDialog(null,"Reporte Generado");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Error al generar el reporte");
                System.out.println("Error al generar el reporte");
            }
        }
    }//GEN-LAST:event_resientesCarreraActionPerformed

    //Reporte por Generacion
    private void porGeneracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porGeneracionActionPerformed
        jFileChooser1.setDialogTitle("Egresados por Generacion");
        jFileChooser1.setSelectedFile(new File("Egresados por Generacion.pdf"));
        if (jFileChooser1.showSaveDialog(null)==0) {
            try {
                ManejadorDB manejador = new ManejadorDB();
                ArrayList<Egresado> egresados = manejador.mostrarEgresados();
                for(Egresado item : egresados){
                    item.setGeneracion(item.SacarGeneracion(item.getFechaEgreso()));
                }
                ArrayList<String> generaciones = new Egresado().generaciones(egresados);
                generaciones = ordenarGeneraciones(generaciones);
                        
                Egresados reporte = new Egresados();
                reporte.porGeneracion(jFileChooser1.getSelectedFile().toPath().toString(), egresados, generaciones);
                
                JOptionPane.showMessageDialog(null,"Reporte Generado");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Error al generar el reporte");
                System.out.println("Error al generar el reporte");
            }
        }
        /*

                    Egresados reporte = new Egresados();
                    reporte.porGeneracion(saveFileDialog1.FileName, egresados, generaciones);
                    
                    MessageBox.Show("Reporte Generado");
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error al generar el reporte");
                    Console.WriteLine(ex);
                }
            }
        */
    }//GEN-LAST:event_porGeneracionActionPerformed

    //Reporte KardexIndividual
    private void kardexIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kardexIndividualActionPerformed
        String numCont = JOptionPane.showInputDialog(null,"Numero de Control: ");
        try {
            ManejadorDB manejador = new ManejadorDB();
            ArrayList<Egresado> lista = manejador.mostrarEgresados();
            if (new Egresado().Existe(numCont, lista)) {
                jFileChooser1.setDialogTitle("Kardex Individual");
                jFileChooser1.setSelectedFile(new File("Kardex Individual de "+numCont+".pdf"));
                if (jFileChooser1.showSaveDialog(null)==0) {
                    Egresado datos = new Egresado().buscar(lista, numCont);
                    ArrayList<Calificaciones> calificaciones = manejador.mostrarCalificaciones(datos.getNumControl());
                    
                    float promedio = 0;
                    for(Calificaciones calf : calificaciones){
                        promedio += calf.getCalificacion();
                    }
                    if (promedio!=0) {
                        promedio/=calificaciones.size();
                    }
                    
                    Egresados reporte = new Egresados();
                    reporte.kardexCalificaciones(jFileChooser1.getSelectedFile().toPath().toString(), datos, calificaciones, promedio);
                    
                    JOptionPane.showMessageDialog(null,"Reporte Generado");
                }
            }
            else{
                JOptionPane.showMessageDialog(null,"No es un Egresado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,"Error al generar el reporte");
            System.out.println("Error al generar el reporte");
        }
    }//GEN-LAST:event_kardexIndividualActionPerformed

    //Reporte Top 10 por Carrera
    private void Top10CarrerasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Top10CarrerasActionPerformed
        jFileChooser1.setDialogTitle("Top 10 por Carrera");
        jFileChooser1.setSelectedFile(new File("Top 10 por Carrera.pdf"));
        if (jFileChooser1.showSaveDialog(null)==0) {
            try {
                ManejadorDB manejador = new ManejadorDB();
                ArrayList<Carrera> carreras = manejador.ListaCarreras();
                ArrayList<Calificaciones> calificaciones = new Egresado().CalifiEgresados(manejador.listaCalificaciones(), manejador.mostrarEgresados());
                ArrayList<Promedio> promedios = new Promedio().listaPromediosE(manejador.mostrarEgresados(),calificaciones);
                
                ArrayList<ArrayList<Promedio>> tops = new ArrayList<>();
                
                for (Carrera car : carreras)
                {
                    ArrayList<Promedio> top = new Promedio().top10C(promedios, car.getNombreCarrera());
                    tops.add(top);
                }
                
                
                Egresados reporte = new Egresados();
                reporte.Top10Carrera(jFileChooser1.getSelectedFile().toPath().toString(), tops, carreras);
                
                JOptionPane.showMessageDialog(null,"Reporte Generado");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Error al generar el reporte");
                System.out.println("Error al generar el reporte");
            }
        }
    }//GEN-LAST:event_Top10CarrerasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SistemaEscolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SistemaEscolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SistemaEscolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SistemaEscolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SistemaEscolar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AvanceCalificaciones;
    private javax.swing.JMenuItem BuscarAlumno;
    private javax.swing.JMenuItem ProcentajeReprovacion;
    private javax.swing.JMenuItem Refrescar;
    private javax.swing.JMenuItem Top10Carreras;
    private javax.swing.JMenuItem Top10Promedios;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInscribir;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JMenuItem buscarEgresado;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem kardexIndividual;
    private javax.swing.JMenuItem listado;
    private javax.swing.JMenuItem porGeneracion;
    private javax.swing.JMenuItem resientesCarrera;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    //Ordenar las Generaciones
    private ArrayList<String> ordenarGeneraciones(ArrayList<String> lista)
    {
        //Convertir años a enteros
        ArrayList<Integer> listaEntera = new ArrayList<>();
        for(String item : lista)
        {
            listaEntera.add(Integer.parseInt(item));
        }

        //Ordenar la lista de enteros
        ArrayList<Integer> listaOrdenada = new ArrayList<>();

        while (listaEntera.size()!= 0)
        {
            int min = 10000;
            int indice = -1;

            for (int i = 0; i < listaEntera.size(); i++)
            {
                if (listaEntera.get(i) <= min)
                {
                    min = listaEntera.get(i);
                    indice = i;
                }
            }
            listaOrdenada.add(listaEntera.get(indice));
            listaEntera.remove(indice);
        }           

        //Convertir la lista ordenada a String
        lista = null;
        lista = new ArrayList<>();
        for (int item : listaOrdenada)
        {
            lista.add("" + item);
        }
        
        //Regresamos
        return lista;
    }
        
}
